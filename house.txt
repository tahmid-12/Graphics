#include<stdio.h>
#include<stdlib.h>
#include<math.h>

#include<GL/glut.h>

double cameraAngle;

void grid_and_axes(){
	
	// draw the three major AXES
	
	glBegin(GL_LINES);
		//X axis
		glColor3f(0, 1, 0);	//100% Green
		glVertex3f(-150, 0, 0);
		glVertex3f( 150, 0, 0);
		
		//Y axis
		glColor3f(0, 0, 1);	//100% Blue
		glVertex3f(0, -150, 0);	// intentionally extended to -150 to 150, no big deal
		glVertex3f(0,  150, 0);
		
		//Z axis
		glColor3f(1, 1, 1);	//100% White
		glVertex3f( 0, 0, -150);
		glVertex3f(0, 0, 150);
	glEnd();
	
	//some gridlines along the field
	int i;

	glColor3f(0.5, 0.5, 0.5);	//grey
	glBegin(GL_LINES);
		for(i=-10;i<=10;i++){

			if(i==0)
				continue;	//SKIP the MAIN axes

			//lines parallel to Y-axis
			glVertex3f(i*10, -100, 0);
			glVertex3f(i*10,  100, 0);

			//lines parallel to X-axis
			glVertex3f(-100, i*10, 0);
			glVertex3f( 100, i*10, 0);
		}
	glEnd();
	
}

void display(){
	//codes for Models, Camera
	
	//clear the display
	//glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	//glClearColor(1,1,1,1);	//color black
	glClearColor(0,0,0,0);
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);		//clear buffers to preset values

	/***************************
	/ set-up camera (view) here
	****************************/ 
	//load the correct matrix -- MODEL-VIEW matrix
	glMatrixMode(GL_MODELVIEW);		//specify which matrix is the current matrix

	//initialize the matrix
	glLoadIdentity();				//replace the current matrix with the identity matrix [Diagonals have 1, others have 0]

	//now give three info
	//1. where is the camera (viewer)?
	//2. where is the camera looking?
	//3. Which direction is the camera's UP direction?

	gluLookAt(0,-150,20,	0,0,0,	0,0,1);
	//gluLookAt(150*sin(cameraAngle), -150*cos(cameraAngle), 50,		0,0,0,		0,0,1);
	
	
	/*************************
	/ Grid and axes Lines
	**************************/
	grid_and_axes();


	/****************************
	/ Add your objects from here
	****************************/

	//right Red Floor
	glPushMatrix();
	   glTranslatef(24, 1.50, 0);
	   glColor3f(1,0,0);
	   glScalef(50, 75, 10);
	   glutSolidCube(1);
	glPopMatrix();

	//house WHITE cube on RED Floor
	glPushMatrix();
	   glTranslatef(24, 2, 30);
	   glColor3f(1,1,1);
	   glScalef(50, 75, 50);
	   glutSolidCube(1);
	glPopMatrix();

	//right back floor
	glPushMatrix();
	   glTranslatef(25, 65, 0);
	   glColor3f(1,.5,.5);
	   glScalef(70, 52, 10);
	   glutSolidCube(1);
	glPopMatrix();

	//House on right back floor
	glPushMatrix();
	   glTranslatef(30, 65, 35);
	   glColor3f(0,.4,0);
	   glScalef(60, 50, 60);
	   glutSolidCube(1);
	glPopMatrix();


	//left Side

	//red boundary
	glPushMatrix();
	   glTranslatef(-20, 2, 2);
	   glColor3f(1,0,0);
	   glScalef(40, 5, 15);
	   glutSolidCube(1);
	glPopMatrix();


	//grey left cube boundary
	glPushMatrix();
	   glTranslatef(-80, 2, 2);
	   glColor3f(.2,.2,.2);
	   glScalef(40, 5, 15);
	   glutSolidCube(1);
	glPopMatrix();

	    //Cylinder building
	glPushMatrix();
	glTranslatef(-93, 3.8, 10);
	glColor3f(.2,.6,.4);
	GLUquadricObj *cyl = gluNewQuadric();
	gluCylinder(cyl, 5, 5, 37.5,5,5);
	glPopMatrix();

	glPushMatrix();
	glTranslatef(-63, 3.8, 10);
	glColor3f(.2,.6,.4);
	GLUquadricObj *cyl1 = gluNewQuadric();
	gluCylinder(cyl1, 5, 5, 37.5,5,5);
	glPopMatrix();

	//Left Side

	//back floor PINK
	glPushMatrix();
	   glTranslatef(-50, 52, 1.8);
	   glColor3f(1,0,.4);
	   glScalef(100, 95, 15);
	   glutSolidCube(1);
	glPopMatrix();

    
	   //house CHOCLATE
	glPushMatrix();
	   glTranslatef(-20, 52, 29);
	   glColor3f(.6,.4,.2);
	   glScalef(-40, 95, 40);
	   glutSolidCube(1);
	glPopMatrix();

	  //house WHITE Left
	glPushMatrix();
	   glTranslatef(-50, 60, 29);
	   glColor3f(1,1,1);
	   glScalef(30, 80, 40);
	   glutSolidCube(1);
	glPopMatrix();

	//house BLUE Left
	glPushMatrix();
	   glTranslatef(-80, 63, 29);
	   glColor3f(0,1,1);
	   glScalef(30, 75, 40);
	   glutSolidCube(1);
	glPopMatrix();

	//Roof
	glPushMatrix();
	   glTranslatef(-47, 44, 50);
	   glColor3f(.6,0,1);
	   glScalef(95, 100, 5.5);
	   glutSolidCube(1);
	glPopMatrix();

	//Roof Cubes

	//Roof Top big Cube
	glPushMatrix();
	   glTranslatef(-47, 65, 70);
	   glColor3f(0,.8,.4);
	   glScalef(-95, 50, 40);
	   glutSolidCube(1);
	glPopMatrix();

	//Roof Middle Cube
	glPushMatrix();
	   glTranslatef(-60, 38, 70);
	   glColor3f(1,1,1);
	   glScalef(30, 5, 40);
	   glutSolidCube(1);
	glPopMatrix();

	//stairs
	/*glPushMatrix();
	   glTranslatef(-45, -2.5, 2);
	   glColor3f(.75,.75,.75);
	   glScalef(29, 15, 15);
	   glutSolidCube(1);
	glPopMatrix();

	glPushMatrix();
	   //glTranslatef(-45, -16.5, 1);
	   glTranslatef(-45, -16.5, 2);
	   glColor3f(.6,.4,.2);
	   glScalef(29, 15, 15);
	   glutSolidCube(1);
	glPopMatrix();

	glPushMatrix();
	   //glTranslatef(-45, -30.5, 0);
	   glTranslatef(-45, -30.5, 2);
	   glColor3f(.6,.4,0);
	   glScalef(29, 15, 15);
	   glutSolidCube(1);
	glPopMatrix();*/
	//
	//ADD this line in the end --- if you use double buffer (i.e. GL_DOUBLE)
	glutSwapBuffers();
}

void animate(){
	//codes for any changes in Models, Camera
	
	cameraAngle += 0.0001;	// camera will rotate at 0.002 radians per frame.
	
	//codes for any changes in Models

	//MISSING SOMETHING? -- YES: add the following
	glutPostRedisplay();	//this will call the display AGAIN

}

void init(){
	//codes for initialization

	cameraAngle = 0;	//angle in radian
	//clear the screen
	glClearColor(0,0,0, 0);

	/************************
	/ set-up projection here
	************************/
	//load the PROJECTION matrix
	glMatrixMode(GL_PROJECTION);
	
	//initialize the matrix
	glLoadIdentity();

	/*
		gluPerspective() — set up a perspective projection matrix

		fovy -         Specifies the field of view angle, in degrees, in the y direction.
        aspect ratio - Specifies the aspect ratio that determines the field of view in the x direction. The aspect ratio is the ratio of x (width) to y (height).
        zNear -        Specifies the distance from the viewer to the near clipping plane (always positive).
        zFar  -        Specifies the distance from the viewer to the far clipping plane (always positive).
    */
	
	gluPerspective(70,	1,	0.1,	10000.0);
	
}

int main(int argc, char **argv){
	
	glutInit(&argc,argv);							//initialize the GLUT library
	
	glutInitWindowSize(800, 500);
	glutInitWindowPosition(100, 100);
	
	/*
		glutInitDisplayMode - inits display mode
		GLUT_DOUBLE - allows for display on the double buffer window
		GLUT_RGBA - shows color (Red, green, blue) and an alpha
		GLUT_DEPTH - allows for depth buffer
	*/
	glutInitDisplayMode(GLUT_DEPTH | GLUT_DOUBLE | GLUT_RGB);	

	glutCreateWindow("Some Title");

	init();						//codes for initialization

	glEnable(GL_DEPTH_TEST);	//enable Depth Testing

	glutDisplayFunc(display);	//display callback function
	glutIdleFunc(animate);		//what you want to do in the idle time (when no drawing is occuring)

	glutMainLoop();		//The main loop of OpenGL

	return 0;
}
